列表操作技巧
============
.. code-block:: python

    num_list = list(range(10))

    # 最后一个元素
    num_list[-1]
    num_list.pop()

    # 去重 - 删除重复元素
    list1 = [1, 2, 3, 3, 4, 'John', 'Ana', 'Mark', 'John']
    list(set(list1))

    # 列表推导式
    [c for c in 'Good good study, 天天向上']


避免踩坑
--------
.. code-block:: python

    # 生成嵌套列表
    >>> a= [[]] * 10
    >>> a
    [[], [], [], [], [], [], [], [], [], []]
    >>> a[0].append(10)
    >>> a[0]
    [10]
    >>> a[1]
    [10]
    >>> a
    [[10], [10], [10], [10], [10], [10], [10], [10], [10], [10]]  # 并非期望结果
    >>> [id(lst) for lst in a]
    [140424525589504,
     140424525589504,
     140424525589504,
     140424525589504,
     140424525589504,
     140424525589504,
     140424525589504,
     140424525589504,
     140424525589504,
     140424525589504]

    a = [[] for _ in range(10)]
    [id(lst) for lst in a]
    [140424520281216,
     140424530218048,
     140424520279232,
     140424520279936,
     140424517294784,
     140424517249664,
     140424520280384,
     140424517371712,
     140424524018304,
     140424520280448]


在访问列表的时候，修改列表

.. code-block:: python

    >>> def modify_lst(lst):
    ...     for idx, elem in enumerate(lst):
    ...         if elem % 3 == 0:
    ...             del lst[idx]
    ...

    >>> lst = [1,2,3,4,5,6]
    >>> modify_lst(lst)
    >>> lst
    [1, 2, 4, 5]

    >>> lst = [1,2,3,6,5,4]
    >>> modify_lst(lst)
    >>> lst
    [1, 2, 6, 5, 4]
    # 出错原因： lst在变短，但idx是递增的
